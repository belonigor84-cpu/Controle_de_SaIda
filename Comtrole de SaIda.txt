<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controle de Saídas</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @media print {
            body {
                margin: 0;
                padding: 0;
            }
            .no-print {
                display: none !important;
            }
            .page-break {
                page-break-after: always;
            }
        }
        
        /* Custom scrollbar for the table container */
        .table-container::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        .table-container::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        .table-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }
        .table-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        
        /* Estilos para o Modo Noturno */
        body.dark-mode {
            background-color: #121212;
            color: #e0e0e0;
        }
        body.dark-mode .bg-white {
            background-color: #1e1e1e;
        }
        body.dark-mode .bg-gray-100 {
            background-color: #2e2e2e;
        }
        body.dark-mode .text-gray-800 {
            color: #f5f5f5;
        }
        body.dark-mode .text-gray-700 {
            color: #e0e0e0;
        }
        body.dark-mode .text-gray-500 {
            color: #b0b0b0;
        }
        body.dark-mode .text-gray-600 {
            color: #9e9e9e;
        }
        body.dark-mode .divide-gray-200 {
            border-color: #444;
        }
        body.dark-mode .border-gray-300 {
            border-color: #444;
        }
        body.dark-mode .hover\:bg-gray-50:hover {
            background-color: #2a2a2a;
        }
        body.dark-mode input {
            background-color: #2e2e2e;
            color: #e0e0e0;
            border-color: #555;
        }
        /* Estiliza os campos desabilitados */
        input:disabled {
            cursor: not-allowed;
            background-color: #e5e7eb;
            color: #6b7280;
        }
        body.dark-mode input:disabled {
            background-color: #3d3d3d;
            color: #a0a0a0;
        }

        /* Oculta os botões de controle por padrão */
        .professor-control {
            display: none !important;
        }

        /* Exibe os botões de controle apenas no Modo Professor */
        body.professor-mode .professor-control {
            display: flex !important;
        }

        /* Estilos para o Modal de Senha */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
            transition: opacity 0.3s ease-in-out;
            opacity: 0;
            pointer-events: none;
        }
        .modal-overlay.open {
            opacity: 1;
            pointer-events: auto;
        }
        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 90%;
            max-width: 400px;
            transform: translateY(-20px);
            transition: transform 0.3s ease-in-out;
        }
        .modal-overlay.open .modal-content {
            transform: translateY(0);
        }
        body.dark-mode .modal-content {
            background-color: #1e1e1e;
        }
    </style>
</head>
<body class="bg-gray-50 p-4 md:p-8">
    <div class="max-w-4xl mx-auto">
        <div class="no-print mb-6 flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <h1 class="text-2xl font-bold text-gray-800">Controle de Saídas</h1>
            <div class="flex flex-wrap gap-2">
                <button id="professorModeToggle" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md flex items-center gap-2 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M10 9a3 3 0 100-6 3 3 0 000 6zM9.548 10.452a5.986 5.986 0 013.902 0c2.453-.393 4.296-.282 5.347.164.215.09.432.186.649.288l.056.028a.5.5 0 01.353.454v2.793a1 1 0 01-1 1h-16a1 1 0 01-1-1v-2.793a.5.5 0 01.353-.454l.056-.028c1.157-.59 3.018-.76 5.347-.164z" />
                    </svg>
                    Modo Professor
                </button>
                <button id="darkModeToggle" class="bg-gray-700 hover:bg-gray-800 text-white px-4 py-2 rounded-md flex items-center gap-2 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M17.293 13.914A10.004 10.004 0 0014.246 5.86a10.004 10.004 0 00-8.914 9.428A1 1 0 014.167 16h-.142a1 1 0 00-1 1 1 1 0 001 1h.142A10.004 10.004 0 0017.293 13.914z" />
                    </svg>
                    Modo Noturno
                </button>
                <button onclick="window.print()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center gap-2 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M5 4v3H4a2 2 0 00-2 2v3a2 2 0 002 2h1v2a2 2 0 002 2h6a2 2 0 002-2v-2h1a2 2 0 002-2V9a2 2 0 00-2-2h-1V4a2 2 0 00-2-2H7a2 2 0 00-2 2zm8 0H7v3h6V4zm0 8H7v4h6v-4z" clip-rule="evenodd" />
                    </svg>
                    Imprimir
                </button>
                <button id="add-row-btn" onclick="addNewRow()" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md professor-control items-center gap-2 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                    Adicionar Linha
                </button>
                <button id="clear-table-btn" onclick="clearTable()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md professor-control flex items-center gap-2 transition-colors">
                    Limpar Tabela
                </button>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md overflow-hidden">
            <div class="table-container overflow-x-auto max-h-[70vh]">
                <table class="min-w-full divide-y divide-gray-200 border border-gray-300">
                    <thead class="bg-gray-100 sticky top-0">
                        <tr>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider border-r border-gray-300 w-12 text-center">Nº</th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider border-r border-gray-300">Nome do Aluno</th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider border-r border-gray-300 w-24 text-center">Cronômetro</th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">Observações</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="namesTableBody">
                        </tbody>
                </table>
            </div>
        </div>

        <div class="no-print mt-4 text-sm text-gray-600">
            <p>Total de registros: <span id="totalRecords">0</span></p>
        </div>
    </div>

    <div id="passwordModal" class="modal-overlay">
        <div class="modal-content text-center">
            <h3 class="text-xl font-semibold mb-4 text-gray-800">Acesso Professor</h3>
            <p class="text-gray-600 mb-4">Digite a senha para habilitar o modo professor.</p>
            <input type="password" id="passwordInput" class="w-full px-4 py-2 mb-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500" placeholder="Senha">
            <div class="flex justify-end gap-2">
                <button id="cancelBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded-md transition-colors">
                    Cancelar
                </button>
                <button id="enterBtn" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors">
                    Entrar
                </button>
            </div>
        </div>
    </div>

    <audio id="alarmSound" preload="auto">
        <source src="https://assets.mixkit.co/sfx/preview/mixkit-alarm-digital-clock-beep-989.mp3" type="audio/mpeg">
    </audio>
    <script>
        // Lógica do Modal de Senha
        const passwordModal = document.getElementById('passwordModal');
        const passwordInput = document.getElementById('passwordInput');
        const enterBtn = document.getElementById('enterBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        const professorModeToggle = document.getElementById('professorModeToggle');
        const professorPassword = 'Professor@Jap';
        const alarmSound = document.getElementById('alarmSound');

        function showPasswordModal() {
            passwordModal.classList.add('open');
            passwordInput.focus();
        }

        function hidePasswordModal() {
            passwordModal.classList.remove('open');
            passwordInput.value = '';
        }

        function checkPassword() {
            if (passwordInput.value === professorPassword) {
                document.body.classList.add('professor-mode');
                professorModeToggle.textContent = 'Sair do Modo Professor';
                toggleInputEditability(true);
                hidePasswordModal();
            } else {
                alert('Senha incorreta.');
                passwordInput.value = '';
                passwordInput.focus();
            }
        }

        enterBtn.addEventListener('click', checkPassword);
        cancelBtn.addEventListener('click', hidePasswordModal);
        passwordInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                checkPassword();
            }
        });
        passwordModal.addEventListener('click', (e) => {
            if (e.target.id === 'passwordModal') {
                hidePasswordModal();
            }
        });
        
        // Lógica do Modo Professor
        function toggleInputEditability(enable) {
            const nameInputs = document.querySelectorAll('input[placeholder="Nome do Aluno"]');
            const notesInputs = document.querySelectorAll('input[placeholder="Observações (opcional)"]');
            nameInputs.forEach(input => input.disabled = !enable);
            notesInputs.forEach(input => input.disabled = !enable);
        }

        professorModeToggle.addEventListener('click', () => {
            if (document.body.classList.contains('professor-mode')) {
                // Sair do Modo Professor sem precisar de senha
                document.body.classList.remove('professor-mode');
                professorModeToggle.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M10 9a3 3 0 100-6 3 3 0 000 6zM9.548 10.452a5.986 5.986 0 013.902 0c2.453-.393 4.296-.282 5.347.164.215.09.432.186.649.288l.056.028a.5.5 0 01.353.454v2.793a1 1 0 01-1 1h-16a1 1 0 01-1-1v-2.793a.5.5 0 01.353-.454l.056-.028c1.157-.59 3.018-.76 5.347-.164z" /></svg> Modo Professor';
                toggleInputEditability(false);
            } else {
                // Abre o modal de senha
                showPasswordModal();
            }
        });

        // Lógica do Modo Noturno
        const darkModeToggle = document.getElementById('darkModeToggle');
        const body = document.body;
        
        const updateDarkModeButton = () => {
            if (body.classList.contains('dark-mode')) {
                darkModeToggle.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M10 2a8 8 0 100 16 8 8 0 000-16zM6 10a4 4 0 118 0 4 4 0 01-8 0z" /></svg> Modo Claro';
            } else {
                darkModeToggle.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M17.293 13.914A10.004 10.004 0 0014.246 5.86a10.004 10.004 0 00-8.914 9.428A1 1 0 014.167 16h-.142a1 1 0 00-1 1 1 1 0 001 1h.142A10.004 10.004 0 0017.293 13.914z" /></svg> Modo Noturno';
            }
        };

        darkModeToggle.addEventListener('click', () => {
            body.classList.toggle('dark-mode');
            if (body.classList.contains('dark-mode')) {
                localStorage.setItem('darkMode', 'enabled');
            } else {
                localStorage.setItem('darkMode', 'disabled');
            }
            updateDarkModeButton();
        });

        if (localStorage.getItem('darkMode') === 'enabled') {
            body.classList.add('dark-mode');
        }
        updateDarkModeButton();

        // Lógica de Persistência e Tabela
        document.addEventListener('DOMContentLoaded', function() {
            loadTable();
        });

        function saveTable() {
            const tableBody = document.getElementById('namesTableBody');
            const rows = Array.from(tableBody.children).map(row => {
                const timerButton = row.querySelector('button');
                return {
                    name: row.querySelector('input[placeholder="Nome do Aluno"]').value,
                    notes: row.querySelector('input[placeholder="Observações (opcional)"]').value,
                    timer: timerButton ? timerButton.textContent : '00:00',
                    running: timerButton ? timerButton.dataset.running || 'false' : 'false',
                    seconds: timerButton ? timerButton.dataset.seconds || '0' : '0',
                    minutes: timerButton ? timerButton.dataset.minutes || '0' : '0',
                    timerId: null
                };
            });
            localStorage.setItem('tableData', JSON.stringify(rows));
        }

        function loadTable() {
            const tableBody = document.getElementById('namesTableBody');
            const savedData = localStorage.getItem('tableData');
            
            if (savedData) {
                const rows = JSON.parse(savedData);
                tableBody.innerHTML = '';
                rows.forEach((data, index) => {
                    addRow(index + 1, data);
                });
                updateTotalRecords();
            } else {
                for (let i = 1; i <= 37; i++) {
                    addRow(i);
                }
                updateTotalRecords();
            }
            // Garante que os campos de texto estão desabilitados no início
            toggleInputEditability(false);
        }

        function addRow(rowNumber, data = {}) {
            const tableBody = document.getElementById('namesTableBody');
            
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50';
            
            const numberCell = document.createElement('td');
            numberCell.className = 'px-4 py-3 whitespace-nowrap text-sm text-gray-500 border-r border-gray-300 text-center';
            numberCell.textContent = rowNumber;
            
            const nameCell = document.createElement('td');
            nameCell.className = 'px-4 py-3 whitespace-nowrap border-r border-gray-300';
            const nameInput = document.createElement('input');
            nameInput.type = 'text';
            nameInput.className = 'w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500';
            nameInput.placeholder = 'Nome do Aluno';
            nameInput.value = data.name || '';
            nameInput.disabled = true; // Desabilita por padrão
            nameInput.addEventListener('input', saveTable);
            nameCell.appendChild(nameInput);
            
            const timerCell = document.createElement('td');
            timerCell.className = 'px-4 py-3 whitespace-nowrap border-r border-gray-300 text-center';
            const timerButton = document.createElement('button');
            timerButton.className = 'bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm timer-button';
            timerButton.textContent = data.timer || '00:00';
            timerButton.onclick = function() {
                startTimer(this);
            };
            timerCell.appendChild(timerButton);
            
            const notesCell = document.createElement('td');
            notesCell.className = 'px-4 py-3 whitespace-nowrap';
            const notesInput = document.createElement('input');
            notesInput.type = 'text';
            notesInput.className = 'w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500';
            notesInput.placeholder = 'Observações (opcional)';
            notesInput.value = data.notes || '';
            notesInput.disabled = true; // Desabilita por padrão
            notesInput.addEventListener('input', saveTable);
            notesCell.appendChild(notesInput);
            
            row.appendChild(numberCell);
            row.appendChild(nameCell);
            row.appendChild(timerCell);
            row.appendChild(notesCell);
            
            tableBody.appendChild(row);

            if (data.running === 'true') {
                timerButton.dataset.seconds = data.seconds;
                timerButton.dataset.minutes = data.minutes;
                timerButton.dataset.running = 'false';
                startTimer(timerButton);
            }
        }

        function addNewRow() {
            const tableBody = document.getElementById('namesTableBody');
            const rowCount = tableBody.children.length + 1;
            addRow(rowCount);
            updateTotalRecords();
            saveTable();
            // Habilita os novos campos se estiver no modo professor
            if (document.body.classList.contains('professor-mode')) {
                toggleInputEditability(true);
            }
        }

        function clearTable() {
            if (confirm('Tem certeza de que deseja limpar a tabela? Esta ação não pode ser desfeita.')) {
                const tableBody = document.getElementById('namesTableBody');
                tableBody.innerHTML = '';
                localStorage.removeItem('tableData');
                updateTotalRecords();
                for (let i = 1; i <= 37; i++) {
                    addRow(i);
                }
            }
        }

        function updateTotalRecords() {
            const tableBody = document.getElementById('namesTableBody');
            document.getElementById('totalRecords').textContent = tableBody.children.length;
        }

        function startTimer(button) {
            // Referência ao elemento de áudio
            const alarm = document.getElementById('alarmSound');
            
            // Verifica o número de cliques em um curto intervalo de tempo
            if (!button.dataset.clicks) {
                button.dataset.clicks = 0;
            }
            
            button.dataset.clicks++;
            
            setTimeout(() => {
                button.dataset.clicks = 0;
            }, 500); // Reseta o contador de cliques após 500ms
            
            if (button.dataset.clicks >= 2) {
                // Ação de resetar o cronômetro (só para Modo Professor)
                if (document.body.classList.contains('professor-mode')) {
                    if (button.dataset.timerId) {
                        clearInterval(button.dataset.timerId);
                        delete button.dataset.timerId;
                    }
                    alarm.pause();
                    alarm.currentTime = 0;
                    
                    button.textContent = '00:00';
                    button.dataset.running = 'false';
                    button.classList.remove('bg-red-500');
                    button.classList.add('bg-blue-500');
                    button.dataset.clicks = '0';
                    button.dataset.seconds = '0';
                    button.dataset.minutes = '0';
                    saveTable();
                }
                return;
            }
            
            if (button.dataset.running === 'true') {
                // Pausar o cronômetro (só para Modo Professor)
                if (document.body.classList.contains('professor-mode')) {
                    if (button.dataset.timerId) {
                        clearInterval(button.dataset.timerId);
                        delete button.dataset.timerId;
                    }
                    alarm.pause();
                    
                    button.dataset.running = 'false';
                    button.classList.remove('bg-red-500');
                    button.classList.add('bg-blue-500');
                    saveTable();
                }
                return;
            }
            
            // Inicia o cronômetro (disponível para todos)
            button.dataset.running = 'true';
            button.classList.remove('bg-blue-500');
            button.classList.add('bg-red-500');
            
            let seconds = parseInt(button.dataset.seconds || '0', 10);
            let minutes = parseInt(button.dataset.minutes || '0', 10);
            
            button.dataset.timerId = setInterval(() => {
                seconds++;
                if (seconds >= 60) {
                    minutes++;
                    seconds = 0;
                }

                if (minutes >= 20) {
                    if (alarm.paused) {
                        alarm.play();
                    }
                }
                
                const formattedTime = 
                    (minutes < 10 ? '0' + minutes : minutes) + ':' + 
                    (seconds < 10 ? '0' + seconds : seconds);
                
                button.textContent = formattedTime;
                
                button.dataset.seconds = seconds.toString();
                button.dataset.minutes = minutes.toString();

                saveTable();
            }, 1000);
        }
    </script>
</body>
</html>